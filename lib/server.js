// Generated by CoffeeScript 1.3.3
var app, authorize, colors, config, express, fs, git, jobs, path, runner, stylus, _;

express = require('express');

stylus = require('stylus');

fs = require('fs');

path = require('path');

colors = require('colors');

jobs = require('./jobs');

git = require('./git');

runner = require('./runner');

config = require(path.normalize(process.cwd() + '/concrete.yml'));

_ = require('underscore');

module.exports = app = express();

authorize = function(user, pass, next) {
  if (config.concrete.auth.user === user && pass === config.concrete.auth.pass) {
    return next;
  } else {
    return next(new Error("401"));
  }
};

app.configure(function() {
  app.set("views", __dirname + "/views");
  app.set("view engine", "jade");
  app.set('view options', {
    layout: false
  });
  app.use(express.logger());
  app.use(express.bodyParser());
  app.use(app.router);
  app.use(require('connect-assets')({
    src: __dirname + '/assets'
  }));
  return app.use(express["static"](__dirname + '/public'));
});

app.configure('development', function() {
  return app.use(express.errorHandler({
    dumpExceptions: true,
    showStack: true
  }));
});

app.configure('production', function() {
  return app.use(express.errorHandler({
    dumpExceptions: true,
    showStack: true
  }));
});

app.get('/', function(req, res) {
  return jobs.getAll(function(jobs) {
    return res.render('index', {
      project: path.basename(process.cwd()),
      jobs: jobs
    });
  });
});

app.get('/jobs', function(req, res) {
  return jobs.getAll(function(jobs) {
    return res.json(jobs);
  });
});

app.get('/job/:id', function(req, res) {
  return jobs.get(req.params.id, function(job) {
    return res.json(job);
  });
});

app.get('/job/:id/:attribute', function(req, res) {
  return jobs.get(req.params.id, function(job) {
    if (job[req.params.attribute] != null) {
      return res.json(job[req.params.attribute]);
    } else {
      return res.send("The job doesn't have the " + req.params.attribute + " attribute");
    }
  });
});

app.get('/clear', function(req, res) {
  return jobs.clear(function() {
    return res.redirect("/jobs");
  });
});

app.get('/add', function(req, res) {
  return jobs.addJob(function() {
    return res.redirect("/jobs");
  });
});

app.get('/ping', function(req, res) {
  return jobs.getLast(function(job) {
    if (job.failed) {
      return res.send(412);
    } else {
      return res.send(200);
    }
  });
});

app.post('/', function(req, res) {
  return jobs.addJob(function(job) {
    runner.build();
    if (req.xhr) {
      console.log(job);
      return res.json(job);
    } else {
      return res.redirect("/");
    }
  });
});

app.post('/hook', function(req, res) {
  if (!req.body) {
    console.log("GitHub JSON is malformed".red);
    res.send(500);
  }
  if (req.body.ref && _.last(req.body.ref.split('/')) === git.branch) {
    return jobs.addJob(function(job) {
      runner.build();
      console.log('GitHub hook triggered a build.'.yellow);
      return res.send(200);
    });
  } else {
    console.log('GitHub hook ignored as it is not a monitored branch.'.yellow);
    return res.send(200);
  }
});
